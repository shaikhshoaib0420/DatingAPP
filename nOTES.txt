Important commands:
dotnet new sln
dotnet new webapi -o API 
dotnet sln add API {Adding API in solution API}
dotnet run
dotnet ef migrations add Migration-name


Angular:

node --version (node's version)
npm --version(npm's version)
ng --version(angular's version)

creating project:
	ng new project-name
connectiong .net and angular project:
	(In startup.cs file)
	Adding Cors service in configure services: services.AddCors(); 
	Adding Cors app in Configure function: app.UseCors(x => x.AllowAnyHeader().AllowAnyMethod().WithOrigins("Angular's link"));

		
adding bootstrap:
	ng add ngx-bootstrap

adding Awesome font:
	npm install font-awesome

video 48:
ng g -h (help)

form:
#loginform = "ngForm"  (ngSubmit)="loin()"    ngModel









taking baseUrl in Environment gives error, and httpOptions implementation for authorization.
member.service.ts, Environement, accountService.ts should be checked for Environement apiUrl


promise                           observable   
Provides a single future value    Emits multiple values over time
Not lazy                          Lazy
Can not cancel                    Able to cancel
                                  Can use with map, filter, reduce 
                                  and other operators

Observable:

	ReplaySubject : Special type of observable which provide last value of buffer.

obaservable should have suffix "$".

video no 55 recap:
for storage purpose: (In localStorage and observable(replaySubject)) 
	first of all we take the response from login function of AccountSercice.ts file 
	as username and tokken, the assigning it to user variable of User Interface of type(username, token),
	setting up user variable in localstorage after stringifying it, and then storing it in observable
	currentUserSource. 
for display purpose:(taking from localStorage parse it and store in observable(replaysubject))
	1)Then in app.component.ts file we initialized setCurrentUser which take the user item from localstorage
	parse it(opposite of stringifying it) and the store and again setting it in observable(replaysubject).
	2) After logging in In nav.component.ts file initializing function getCurrentUser which see the observable(currentUser$),
	is empty or filled with user. if filled the making loggedIn variable as ture else false. and will persist the 
	username and token on console as it stored in localStorage and then observable, if not logged out. Because logout 
	function in accountService.ts file remove item from localStorage and nullify the observable.



video no 56 recape:
	Directly using observable(replaySubject) i.e. currentUser$ in nav.component.html and
	nav.component.ts file instead of boolean variable loggedIn.

 Doubts : 
	  
	  3) bullet execution of getUser() doesn't work, lengthy method does. 
	
	  5) source control pushing.



Angular toastr services:
	command: npm install ngx-toastr

 Repository:
		(using repository instead of DataContext)
		from UsersController.cs to IUserRepository.cs interface, 
		which call UserRepository.cs. Implementation of interface IUserRepository.cs
		is in UserRepository.cs which is in Data folder.

		 



video no 112 :
	adding photo gallery using ngx-gallery.
	adding ngx-gallery to member-detail.ts and pass galleryOptions and galleryImages in the ts file.
	in ts file execute getImages() to get galleryImages after getMember() function.and then galleryOptions.

Video 132: using ng2-file-uploader in client for uploading image.

Doubt:


	
toastr services doesn't have design in register.ts file.


video 69: toastr properties is not running in authguard.ts



video 133 adding photo from client gives error 500(), controller's function add-photo

video 156 : why he is using [(ngModel)]="pagination.currentPage" in meber-list.html file and not using it.


up

while updating user it doesn't find token.
video 150: validation error can't be visible on template nor console. it only visible on network response.
video 160 to be start.
